/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xreview;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import com.crio.xreview.dao.CompanyDAO;
import com.crio.xreview.dao.ReviewDAO;
import com.crio.xreview.dao.ReviewLikeDAO;
import com.crio.xreview.dao.ReviewReplyDAO;
import com.crio.xreview.dao.UserDAO;
import com.crio.xreview.model.Company;
import com.crio.xreview.model.Review;
import com.crio.xreview.model.ReviewReply;
import com.crio.xreview.model.User;
import com.crio.xreview.util.DatabaseConnection;
import com.crio.xreview.util.DatabaseSetup;

public class App {

    private static final String RESET = "\033[0m";  // Text Reset
    private static final String CYAN = "\033[0;36m";    // CYAN
    private static final String GREEN = "\033[0;32m";   // GREEN
    private static final String RED = "\033[0;31m"; // RED

    private static Scanner scanner = new Scanner(System.in);
    private static DatabaseConnection dbConnection;
    private static UserDAO userDAO;
    private static CompanyDAO companyDAO;
    private static ReviewDAO reviewDAO;
    private static ReviewReplyDAO reviewReplyDAO;
    private static ReviewLikeDAO reviewLikeDAO;


    public String getGreeting() {
        return "Welcome to xReview!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        
        // Load properties from application.properties
        Properties properties = new Properties();
        try (InputStream input = App.class.getClassLoader().getResourceAsStream("application.properties")) {
            if (input == null) {
                System.out.println("Sorry, unable to find application.properties");
                return;
            }
            // Load properties file
            properties.load(input);

            // Get the property values
            String url = properties.getProperty("db.url");
            String username = properties.getProperty("db.username");
            String password = properties.getProperty("db.password");
            String driverClassName = properties.getProperty("jdbc.driverClassName");

            // Initialize database connection
            dbConnection = DatabaseConnection.getInstance(url, username, password, driverClassName);
            userDAO = new UserDAO(dbConnection);
            companyDAO = new CompanyDAO(dbConnection);
            reviewDAO = new ReviewDAO(dbConnection);
            reviewReplyDAO = new ReviewReplyDAO(dbConnection);
            reviewLikeDAO = new ReviewLikeDAO(dbConnection);

        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Setup the database
        DatabaseSetup.executeSQLScript(dbConnection);
        

        while (true) {
            System.out.println(CYAN);
            System.out.println("Select an option:");
            System.out.println("1. Create an account");
            System.out.println("2. Create a company");
            System.out.println("3. Post a review");
            System.out.println("4. View reviews");
            System.out.println("5. Like a review");
            System.out.println("6. Reply to a review");
            System.out.println("7. Update a review");
            System.out.println("8. Delete a review");
            System.out.println("9. Exit");
            System.out.println(RESET);

            int choice = Integer.parseInt(scanner.nextLine());

            try {
                switch (choice) {
                    case 1:
                        createUser();
                        break;
                    case 2:
                        createCompany();
                        break;
                    case 3:
                        postReview();
                        break;
                    case 4:
                        viewReviews();
                        break;
                    case 5:
                        likeReview();
                        break;
                    case 6:
                        replyToReview();
                        break;
                    case 7:
                        updateReview();
                        break;
                    case 8:
                        deleteReview();
                        break;
                    case 9:
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
                System.out.println(RESET);
            } catch (SQLException e) {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                e.printStackTrace(pw);
                String stackTrace = sw.toString();
                System.out.println(RED + stackTrace + RESET);
            }
        }
    }

    private static void createUser() throws SQLException {
        System.out.println("Enter username:");
        String username = scanner.nextLine();
        System.out.println("Enter password:");
        String password = scanner.nextLine();

        User user = userDAO.createUser(username, password);
        System.out.println(GREEN);
        System.out.println("User created with ID: " + user.getUserId());
    }

    private static void createCompany() throws SQLException {
        System.out.println("Enter company name:");
        String name = scanner.nextLine();
        System.out.println("Enter company description:");
        String description = scanner.nextLine();
        System.out.println("Enter owner ID:");
        int ownerId = Integer.parseInt(scanner.nextLine());
        Company company = companyDAO.createCompany(name, description,ownerId);
        System.out.println(GREEN);
        System.out.println("Company created with ID: " + company.getCompanyId());
    }

    private static void postReview() throws SQLException {
        System.out.println("Enter user ID:");
        int userId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter company ID:");
        int companyId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter review text:");
        String reviewText = scanner.nextLine();
        System.out.println("Enter rating (1-5):");
        int rating = Integer.parseInt(scanner.nextLine());

        Review review = reviewDAO.createReview(userId, companyId, reviewText, rating);
        System.out.println(GREEN);
        System.out.println("Review posted with ID: " + review.getReviewId());
    }

    private static void viewReviews() throws SQLException {
        System.out.println("Enter company ID:");
        int companyId = Integer.parseInt(scanner.nextLine());
        System.out.println("Sort by (newest, highest_rating, lowest_rating):");
        String sortBy = scanner.nextLine();

        List<Review> reviews = reviewDAO.getReviewsByCompanyId(companyId, sortBy);
        System.out.println(GREEN);
        for (Review review : reviews) {
            System.out.println("Review ID: " + review.getReviewId());
            System.out.println("User ID: " + review.getUserId());
            System.out.println("Review Text: " + review.getReviewText());
            System.out.println("Rating: " + review.getRating());
            System.out.println("------------");
        }
    }

    private static void likeReview() throws SQLException {
        System.out.println("Enter review ID:");
        int reviewId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter user ID:");
        int userId = Integer.parseInt(scanner.nextLine());
        System.out.println(GREEN);
        if (reviewLikeDAO.isReviewLikedByUser(reviewId, userId)) {
            reviewLikeDAO.unlikeReview(reviewId, userId);
            System.out.println("Review unliked.");
        } else {
            reviewLikeDAO.likeReview(reviewId, userId);
            System.out.println("Review liked.");
        }
    }

    private static void replyToReview() throws SQLException {
        System.out.println("Enter review ID:");
        int reviewId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter reply text:");
        String replyText = scanner.nextLine();
        Review review = reviewDAO.getReviewById(reviewId);
        Company company = companyDAO.getCompanyById(review.getCompanyId());
        ReviewReply reply = reviewReplyDAO.postReply(reviewId, company.getOwnerId(), replyText);
        System.out.println(GREEN);
        System.out.println("Reply posted for review ID: " + reply.getReviewId() + " by owner ID: " + reply.getOwnerId());
    }

    private static void updateReview() throws SQLException {
        System.out.println("Enter review ID:");
        int reviewId = Integer.parseInt(scanner.nextLine());
        System.out.println("Enter new review text:");
        String newReviewText = scanner.nextLine();
        System.out.println("Enter new rating (1-5):");
        int newRating = Integer.parseInt(scanner.nextLine());

        reviewDAO.updateReview(reviewId, newReviewText, newRating);
        System.out.println(GREEN);
        System.out.println("Review updated.");
    }

    private static void deleteReview() throws SQLException {
        System.out.println("Enter review ID:");
        int reviewId = Integer.parseInt(scanner.nextLine());

        reviewDAO.deleteReview(reviewId);
        System.out.println(GREEN);
        System.out.println("Review deleted.");
    }
}
